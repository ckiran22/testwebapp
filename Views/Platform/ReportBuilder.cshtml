@{
    ViewBag.Title = "ReportBuilder";
}
<link rel="stylesheet" href="@SystemVars.CDNBaseUrl/vendor_js/bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" href="@SystemVars.CDNBaseUrl/vendor_js/bootstrap/css/bootstrap-theme.min.css" />
<link href="@SystemVars.CDNBaseUrl/vendor_js/angular_treeview/css/angular.treeview.css" rel="stylesheet" />
<script src="@SystemVars.CDNBaseUrl/vendor_js/bootstrap/js/bootstrap.min.js"></script>
<script src="@SystemVars.CDNBaseUrl/vendor_js/angular_treeview/angular.treeview.js"></script>
<script src="@SystemVars.CDNBaseUrl/vendor_js/angular_treeview/draganddrop.js"></script>
<script src="@SystemVars.CDNBaseUrl/vendor/moment/moment-with-locales.min.js"></script>
<script src="@SystemVars.CDNBaseUrl/vendor/moment/moment-fquarter.min.js"></script>
<script src="@SystemVars.CDNBaseUrl/vendor/bootstrap/js/bootstrap-datepicker.js"></script>
<script src="@SystemVars.CDNBaseUrl/js/angular/enz-table.js"></script>
<link rel="stylesheet" href="@SystemVars.CDNBaseUrl/css/angular/enz-table.css" />
<style>
	ul
	{
		list-style-type: none;
	}
	.filterlogicPanel {
		min-height:74px;
	}
	.field-error {
		color: red;
		margin-top: 4px;
	}
    /*.table-responsive > th, td {
        border: 1px solid black;
    }*/
    .glyphicon-text:before {
        content:'a';
        font-size:x-large;
    }
    .glyphicon-number:before {
        content:'#';
        font-size:large;
    }
    /*.dropdown-submenu {
        visibility:visible;
        display:block;
    }*/
    .dropdown-submenu {
    position: relative;
    }

    .dropdown-submenu>.dropdown-menu {
    top: 0;
    left: 100%;
    margin-top: -6px;
    margin-left: -1px;
    -webkit-border-radius: 0 6px 6px 6px;
    -moz-border-radius: 0 6px 6px;
    border-radius: 0 6px 6px 6px;
    }

    .dropdown-submenu:hover>.dropdown-menu {
    display: block;
    }

    .dropdown-submenu>a:after {
    display: block;
    content: " ";
    float: right;
    width: 0;
    height: 0;
    border-color: transparent;
    border-style: solid;
    border-width: 5px 0 5px 5px;
    border-left-color: #ccc;
    margin-top: 5px;
    margin-right: -10px;
    }

    .dropdown-submenu:hover>a:after {
    border-left-color: #fff;
    }

    .dropdown-submenu.pull-left {
    float: none;
    }

    .dropdown-submenu.pull-left>.dropdown-menu {
    left: -100%;
    margin-left: 10px;
    -webkit-border-radius: 6px 0 6px 6px;
    -moz-border-radius: 6px 0 6px 6px;
    border-radius: 6px 0 6px 6px;
    }
    .non-date-field {
        display:none;
        visibility: hidden;
    }
</style>
@model Enzigma.Platform.Web.UI.PlatformPageContext
@using Enzigma.Platform;
@using Enzigma.Platform.Objects;
<script>
    //to conver the the normal text boxes to date picker
    $(function(){
        $('#datetimepickerFrom').datepicker({format: 'mm/dd/yyyy'});
        $('#datetimepickerTo').datepicker({format: 'mm/dd/yyyy'});
    });
    //Report builder module and controller
    //This module includes three more modules which includes angularTreeView, ngDragDrop, enz.controls
    //the angularTreeview module is used to create the folder view on the builder
    //ngDragDrop is used for drag and drop
    //enz control is never used but planned to be used for field picker to compare the values from a field while creating report filters
    var ReportBuilderModule = angular.module('ReportBuilderModule', ['angularTreeview','ngDragDrop','enz.controls']);

	ReportBuilderModule.controller("ReportBuilderController",['$scope', '$http', '$compile', '$filter',function($scope,$http,$compile,$filter){
	    //this controller uses three services as $http to support ajax request, $compile to compile the html with scope and $filter to use filtering service in the code
        //Below section gets compiled and loaded at server side
		$scope.editReportId = @Html.Raw(JsonObject.Serialize( Model.Data["params"]["Id"]));
		$scope.headingText = "Reports & Dashboards";
		$scope.folders = @Html.Raw(JsonObject.Serialize(Engine.Query(Model.Session.Id,String.Format("SELECT * FROM [Folder]"),DeletedOption.NonDeletedOnly).Data));
		$scope.reports = @Html.Raw(JsonObject.Serialize(Engine.Query(Model.Session.Id,String.Format("SELECT * FROM [Report]"),DeletedOption.NonDeletedOnly).Data));
	    $scope.objectsArray = @Html.Raw(JsonObject.Serialize(Engine.Query(Model.Session.Id,String.Format("SELECT Id,Name FROM [ObjectDef]"),DeletedOption.NonDeletedOnly).Data));
	    //Server side section ends here
        //getMapByField creates the map of array of objects based on the perticular filed passed to it. It can also create array based on the relational objects field as passed with dot(.) seperator
	    $scope.reportMapByFolderId = getMapByField($scope.reports,'Folder.Id');
	    //variable for fiscal month
	    $scope.fiscalMonth = @Model.Session.LoggedInUser.Organization.FiscalMonth;
        //variables used for pagination
	    $scope.currentPage = 0;
	    $scope.pageCount = 1;
	    $scope.pageSize = 10;
	    $scope.totalRecords = 0;
	    //Folder Tree Logic
        //created copy of original folder arrays
	    $scope.originalFolders = angular.copy($scope.folders);
        //logic to create the data structure required by the directive to convert it to tree
		$scope.createFolderHierarchy = function(){
		    $scope.folders = [];
		    angular.forEach($scope.originalFolders,function(cf, iIndex){
		        if(cf.ParentFolder.Id)
		        {
		            var parent  = findValueFromArray($scope.originalFolders,"Id", cf.ParentFolder.Id);
		            if(!parent.children)
		                parent.children = [];
		            parent.children.push(cf);
		        }
		        else 
		            $scope.folders.push(cf);
		    });
		};
        //Logic to create data structure for tree view ends here
		$scope.createFolderHierarchy();
        //Folder Tree Logic
		$scope.objectName = {};
        //below array contains the fields of an object on which the report is to be built
		$scope.objectfieldsArray = [];
        //Array of display fields contains the field names whose values to be displayed in the report
		$scope.displayfieldsArray = [];
	    //groupfield array contains the array of string field to create the grouping in group report. 
		//Note: please don't reinitialize the arrays to empty array so that the dropping zone is shown to users else the ng repeat will not work
		$scope.groupfieldsArray = [""];
		//Array that holds the date range json array which contains the functiona to display the date ranges and to alson contains the sql functions to be passed to the server to filter the data on sql
		$scope.dateRanges = [];
	    //Array that holds the date part json array which contains the values to be displayed and to be passed to the report to generate report with date parts based on selected value
		$scope.datepartArray = [];
	    //Map of field in grouping and the date part selected
		$scope.mapDatePartByField = {};
        //Flag to show or hide the details
		$scope.showDetail = true;
        //flag to change the report list view to designer
		$scope.changeView = false;
        //map of object filed by there names
		$scope.objectfieldsByNameMap = {};
        //Object acts as enum for the origninal enum on the server side to select the report type
		$scope.reportTypes = ["Simple","Group", "Matrix"];
        //I dought this variable is in use or not please check it and if not required delete it
		$scope.fieldArray = [];
        //Array to hold the summary field while creating group fields and summary fields inside the group field
		$scope.summaryFieldsArray = [];
        //Used when the matrix report was not to be designed need to remove this but before that need to check if usefull or not
		$scope.isGroupDropped = false;
        //contains the field with display type as date. It is used to bind to range filters
		$scope.objectDateFieldsArray = [];
        //used to store the criterias while designing the reports
		$scope.criteriasArray = [];
        //flag which checks whether there are any filters on the report and to show them on the UI
		$scope.isFiltered = false;
        //Flag to check the sorting is done on the report
		$scope.isSorted = false;
        //Flag used while creation of filter logic
		$scope.IsFilterLogic = true;
        //Array contains the column grouping field for matrix report
		$scope.colfieldsArray = [""];
        //Array to store the row grouping field for matrix report
		$scope.rowfieldsArray = [""];
        //Note please donot reinitalize there arrays to empty one to show the droping zone if the matrix dept is crossed the server itself will not generate the dropping zone
        //Array contains the condionol operators and server logic to be sent to server to filter the report
		$scope.conditionalOperators = [{Label:'equals',Value:"='{0}'"},{Label:'not equal to',Value:"<>'{0}'"},{Label:'less than',Value:"<'{0}'"},{Label:'greater than',Value:">'{0}'"},
            {Label:'less or equal',Value:"<='{0}'"},{Label:'greater or equal',Value:">='{0}'"},{Label:'contains',Value:"LIKE '%{0}%' "},{Label:'does not contains',Value:"NOT IN('{0}')"},{Label:'starts with',Value:"LIKE '{0}%'"}];
        
		$scope.numericRegEx = /^[0-9]*$/;
        //Loading dateRanges from the server
		$http.get(Engine.CDNBaseUrl + 'application_json/daterange.json').
			success(function(data, status, headers, config) {
				$scope.dateRanges = data;
			}).
			error(function(data, status, headers, config) {
			  // log error
		});
	    //Loading dateparts from the server
		$http.get(Engine.CDNBaseUrl + 'json/datepart.json').
			success(function(data, status, headers, config) {
			    $scope.datepartArray = data;
			}).
			error(function(data, status, headers, config) {
			    // log error
			});
	    //Logic for  menu on groups
		$scope.removeGroup = function(field,fieldBelongTo){
		    $scope.removedfield = field;
		    switch(fieldBelongTo){
		        case 'GROUPBY':
		            $scope.groupfieldsArray.splice($scope.groupfieldsArray.indexOf(field),1);
		            break;
		        case 'COLUMN':
		            $scope.colfieldsArray.splice($scope.colfieldsArray.indexOf(field),1);
		            break;
		        case 'ROW':
		            $scope.rowfieldsArray.splice($scope.rowfieldsArray.indexOf(field),1);
		            break;
		        default:
		            break;
		    }
		    $scope.objectfieldsArray.push(field);
		    $scope.objectfieldsArray.sort();
		    $scope.refresh();
		};
		$scope.moveGroupUp = function(field,fieldBelongTo){
		    switch(fieldBelongTo){
		        case 'GROUPBY':
		            var iIndex = $scope.groupfieldsArray.indexOf(field);
		            if(!$scope.reportObject.GroupBy)
		                $scope.reportObject.GroupBy = [];
		            else if(typeof $scope.reportObject.GroupBy == 'string')
		                $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);
		            var groupToBeMovedUp = $scope.reportObject.GroupBy[iIndex - 1];
		            $scope.reportObject.GroupBy[iIndex - 1] = $scope.reportObject.GroupBy[iIndex - 2];
		            $scope.reportObject.GroupBy[iIndex - 2] = groupToBeMovedUp;
		            $scope.groupfieldsArray[iIndex] = $scope.groupfieldsArray[iIndex - 1];
		            $scope.groupfieldsArray[iIndex - 1] = field;
		            $scope.reportObject.GroupBy = JSON.stringify($scope.reportObject.GroupBy);
		            break;
		        case 'COLUMN':
		            var iIndex = $scope.colfieldsArray.indexOf(field);
		            if(!$scope.reportObject.Columns)
		                $scope.reportObject.Columns = [];
		            else if(typeof $scope.reportObject.Columns == 'string')
		                $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);
		            var groupToBeMovedUp = $scope.reportObject.Columns[iIndex - 1];
		            $scope.reportObject.Columns[iIndex - 1] = $scope.reportObject.Columns[iIndex - 2];
		            $scope.reportObject.Columns[iIndex - 2] = groupToBeMovedUp;
		            $scope.colfieldsArray[iIndex] = $scope.colfieldsArray[iIndex - 1];
		            $scope.colfieldsArray[iIndex - 1] = field;
		            $scope.reportObject.Columns = JSON.stringify($scope.reportObject.Columns);
		            break;
		        case 'ROW':
		            var iIndex = $scope.rowfieldsArray.indexOf(field);
		            if(!$scope.reportObject.Rows)
		                $scope.reportObject.Rows = [];
		            else if(typeof $scope.reportObject.Rows == 'string')
		                $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);
		            var groupToBeMovedUp = $scope.reportObject.Rows[iIndex - 1];
		            $scope.reportObject.Rows[iIndex - 1] = $scope.reportObject.Rows[iIndex - 2];
		            $scope.reportObject.Rows[iIndex - 2] = groupToBeMovedUp;
		            $scope.rowfieldsArray[iIndex] = $scope.rowfieldsArray[iIndex - 1];
		            $scope.rowfieldsArray[iIndex - 1] = field;
		            $scope.reportObject.Rows = JSON.stringify($scope.reportObject.Rows);
		            break;
		        default:
		            break;
		    }
		    $scope.refresh();
		};
		$scope.moveGroupDown = function(field,fieldBelongTo){
		    switch(fieldBelongTo){
		        case 'GROUPBY':
		            var iIndex = $scope.groupfieldsArray.indexOf(field);
		            if(!$scope.reportObject.GroupBy)
		                $scope.reportObject.GroupBy = [];
		            else if(typeof $scope.reportObject.GroupBy == 'string')
		                $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);
		            var groupToBeMovedUp = $scope.reportObject.GroupBy[iIndex - 1];
		            $scope.reportObject.GroupBy[iIndex - 1] = $scope.reportObject.GroupBy[iIndex];
		            $scope.reportObject.GroupBy[iIndex] = groupToBeMovedUp;
		            $scope.groupfieldsArray[iIndex] = $scope.groupfieldsArray[iIndex + 1];
		            $scope.groupfieldsArray[iIndex + 1] = field;
		            $scope.reportObject.GroupBy = JSON.stringify($scope.reportObject.GroupBy);
		            break;
		        case 'COLUMN':
		            var iIndex = $scope.colfieldsArray.indexOf(field);
		            if(!$scope.reportObject.Columns)
		                $scope.reportObject.Columns = [];
		            else if(typeof $scope.reportObject.Columns == 'string')
		                $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);
		            var groupToBeMovedUp = $scope.reportObject.Columns[iIndex - 1];
		            $scope.reportObject.Columns[iIndex - 1] = $scope.reportObject.Columns[iIndex];
		            $scope.reportObject.Columns[iIndex] = groupToBeMovedUp;
		            $scope.colfieldsArray[iIndex] = $scope.colfieldsArray[iIndex + 1];
		            $scope.colfieldsArray[iIndex + 1] = field;
		            $scope.reportObject.Columns = JSON.stringify($scope.reportObject.Columns);
		            break;
		        case 'ROW':
		            var iIndex = $scope.rowfieldsArray.indexOf(field);
		            if(!$scope.reportObject.Rows)
		                $scope.reportObject.Rows = [];
		            else if(typeof $scope.reportObject.Rows == 'string')
		                $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);
		            var groupToBeMovedUp = $scope.reportObject.Rows[iIndex - 1];
		            $scope.reportObject.Rows[iIndex - 1] = $scope.reportObject.Rows[iIndex];
		            $scope.reportObject.Rows[iIndex] = groupToBeMovedUp;
		            $scope.rowfieldsArray[iIndex] = $scope.rowfieldsArray[iIndex + 1];
		            $scope.rowfieldsArray[iIndex + 1] = field;
		            $scope.reportObject.Rows = JSON.stringify($scope.reportObject.Rows);
		            break;
		        default:
		            break;
		    }
		    $scope.refresh();
		};
		$scope.changeDatePart = function(field,datepart,fieldBelongTo){
		    $scope.mapDatePartByField[field] = datepart;
		    switch(fieldBelongTo){
		        case 'GROUPBY':
		            if(!$scope.reportObject.GroupBy)
		                $scope.reportObject.GroupBy = [];
		            else if(typeof $scope.reportObject.GroupBy == 'string')
		                $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);

		            angular.forEach($scope.reportObject.GroupBy, function(currentGroup){
		                if(currentGroup.Field == field)
		                    currentGroup.DatePart = datepart;
		            });
		            $scope.reportObject.GroupBy = JSON.stringify($scope.reportObject.GroupBy);
		            break;
		        case 'COLUMN':
		            if(!$scope.reportObject.Columns)
		                $scope.reportObject.Columns = [];
		            else if(typeof $scope.reportObject.Columns == 'string')
		                $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);

		            angular.forEach($scope.reportObject.Columns, function(currentGroup){
		                if(currentGroup.Field == field)
		                    currentGroup.DatePart = datepart;
		            });
		            $scope.reportObject.Columns = JSON.stringify($scope.reportObject.Columns);
		            break;
		        case 'ROW':
		            if(!$scope.reportObject.Rows)
		                $scope.reportObject.Rows = [];
		            else if(typeof $scope.reportObject.Rows == 'string')
		                $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);

		            angular.forEach($scope.reportObject.Rows, function(currentGroup){
		                if(currentGroup.Field == field)
		                    currentGroup.DatePart = datepart;
		            });
		            $scope.reportObject.Rows = JSON.stringify($scope.reportObject.Rows);
		            break;
		        default:
		            break;
		    }
		    $scope.refresh();
		};
		$scope.isDateField = function(field){
            if(field)
		        if($scope.objectfieldsByNameMapOriginal[field.toUpperCase()].SystemType.search(/DateTime/i) != -1)
		            return true;
		    return false;
		};
        //Logic for menu on groups ends here
		//Method to initialize the report object
		$scope.createeditReport = function(report){
			$scope.reportObject = report;
			if(!$scope.reportObject){
				$('#dialogObject').modal('show');
				$scope.reportObject = {ObjType: 'Report', DisplayFields:'Name', Type:'Simple', SortBy : 'Name'};//Name: 'Unsaved Report', Label: 'Unsaved Report',
			}
			else
			{
			    $scope.objectName = $scope.reportObject.ObjectName;
			    if($scope.reportObject.Range){
			        $scope.reportObject.Range = JSON.parse($scope.reportObject.Range) ;
			        $scope.timeframeDateField = $scope.reportObject.Range.Field;
			    }
			    if($scope.reportObject.Criteria)
			    {
			        var criteria = JSON.parse($scope.reportObject.Criteria);
			        $scope.criteriasArray = criteria.Filters;
			        $scope.filterLogic = criteria.FilterLogic;
			    }
			    if($scope.reportObject.GroupBy)
			    {
			        $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);
			        angular.forEach($scope.reportObject.GroupBy,function(currentGroup){ $scope.groupfieldsArray.push(currentGroup.Field)});
			        $scope.initializedEditReport = true;
			    }
			    if($scope.reportObject.Rows)
			    {
			        $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);
			        angular.forEach($scope.reportObject.Rows,function(currentRow){ $scope.rowfieldsArray.push(currentRow.Field)});
			        $scope.initializedEditReport = true;
			    }
			    if($scope.reportObject.Columns)
			    {
			        $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);
			        angular.forEach($scope.reportObject.Columns,function(currentCol){ $scope.colfieldsArray.push(currentCol.Field)});
			        $scope.initializedEditReport = true;
			    }
			    if($scope.reportObject.SortBy)
			    {
			        var sortBy = $scope.reportObject.SortBy.split(' ');
			        $scope.sortOrderObject = { SortBy: sortBy[0], SortOrder: sortBy[1]};
			        $scope.isSorted = true;
			    }
				$scope.newReport();
			}
		};
        //Method which actually rerenders the priview pane by requesting server to generate the report once again with the modified or new report object sent with the request
		$scope.refresh = function(){
		    var regEx = new RegExp('{fiscalMonth}', 'g');
		    var filterLogicCopy = '';
		    if($scope.criteriasArray.length > 0)
		    {
                if($scope.filterLogic)
                    filterLogicCopy = angular.copy($scope.filterLogic);
                else{
                    if($scope.criteriasArray.length == 1)
                        filterLogicCopy = '1';
                    else
                        angular.forEach($scope.criteriasArray,function(crrentCriteria,iIndex){
                            filterLogicCopy += (iIndex != $scope.criteriasArray.length - 1) ? (iIndex + 1 ) + ' AND ' : (iIndex + 1 );
                        });
                }
		        
		    }
		    if($scope.timeframeRangeField && $scope.timeframeRangeField.Value != 'alltime'){
		        $scope.reportObject.Range = JSON.stringify( {Field:$scope.timeframeDateField, From: ($scope.timeframeRangeField.From.Value) ? $scope.timeframeRangeField.From.Value.replace(regEx,$scope.fiscalMonth) :
                    ($scope.timeframeRangeField.From.Label) ?'CONVERT(datetimeoffset,' + "'" + $scope.timeframeRangeField.From.Label + "')" : undefined
                    , To: ($scope.timeframeRangeField.To.Value) ? $scope.timeframeRangeField.To.Value.replace(regEx,$scope.fiscalMonth) :
                    ($scope.timeframeRangeField.To.Label) ? 'CONVERT(datetimeoffset,' + "'" + $scope.timeframeRangeField.To.Label + "')"  : undefined
                    });
		    }
		    else if($scope.timeframeRangeField && $scope.timeframeRangeField.Value == 'alltime')
		        $scope.reportObject.Range = undefined;
		    $scope.reportObject.Criteria = ($scope.criteriasArray.length > 0) ? JSON.stringify( {FilterLogic:filterLogicCopy, Filters:$scope.criteriasArray}) : undefined;//filterLogicCopy;
		    $scope.reportObject.DisplayFields = $scope.displayfieldsArray.join();
		    $scope.reportObject.Page = ($scope.currentPage != 0) ? $scope.currentPage : 1;
		    $scope.reportObject.RowLimit = $scope.pageSize;
		    Engine.post(Engine.AppPath + '/controls/ReportView', $scope.reportObject , function(error){
                $('#reportContent').html('').append($compile( error.Data )( $scope ));
                $('table tr td:first-child').addClass('showonmobile');
                if($scope.currentPage == 0)
                    $scope.setPage($scope.currentPage,$scope.totalRecords = error['TotalRecords']);
            });
		};
        //Creates the new report object and also brings the object fields to create the required environment for the report builder
		$scope.newReport = function(){
			if($scope.objectName.Id){
				$scope.changeView = true;
				$scope.headingText = ($scope.reportObject.Label) ? $scope.reportObject.Label : "Unsaved Report";
				$scope.reportObject.ObjectName = $scope.objectName;
				$scope.objectfieldsByNameMapOriginal = Engine.getFieldDefs($scope.objectName.Name);
				$scope.objectfieldsByNameMap = angular.copy($scope.objectfieldsByNameMapOriginal);
				angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){
						if(currentObj.SystemType.search(/int/i) != -1)
							$scope.summaryFieldsArray.push(currentObj.Name);
					});
				$scope.objectDateFieldsArray = $filter('filter')($.map($scope.objectfieldsByNameMap, function(value, index) { return [value];}),{DisplayAs: 'DateTime'});
			    //Logic for range

				$scope.timeframeDateField = (!$scope.timeframeDateField) ? $scope.objectDateFieldsArray[0].Name : $scope.timeframeDateField;
				angular.forEach($scope.reportObject.DisplayFields.split(','), function(currentField){
					delete $scope.objectfieldsByNameMap[currentField.toUpperCase()];
					$scope.displayfieldsArray.push(currentField);
				});
				if($scope.reportObject.Type == 'Group')
				    angular.forEach($scope.reportObject.groupfieldsArray, function(currentField){
				        delete $scope.objectfieldsByNameMap[currentField.toUpperCase()];
				    });
				if($scope.reportObject.Type == 'Matrix')
				{
				    if($scope.rowfieldsArray)
				        angular.forEach($scope.rowfieldsArray, function(currentField){
				            delete $scope.objectfieldsByNameMap[currentField.toUpperCase()];
				        });
				    if($scope.colfieldsArray)
				        angular.forEach($scope.colfieldsArray, function(currentField){
				            delete $scope.objectfieldsByNameMap[currentField.toUpperCase()];
				        });
				}
				angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){$scope.objectfieldsArray.push(currentObj.Name)});
				$scope.objectfieldsArray.sort();
				$('#dialogObject').modal('hide');
				$scope.refresh();
			}else{
				alert("Please select the Object")
			}
		};
		$scope.selectObject = function(){
			$scope.headingText = 'Create New Report';
			$scope.reportObject = {ObjType: 'Report', Name: 'Unnamed Report', Label: 'Unnamed Report'};
		};
        //Cancel the report which is to be build
		$scope.cancel = function(){
			$scope.reportObject = undefined;
			$scope.changeView = false;
		};
        //method get called when the new dashboard button is clicked
		$scope.newDashBoard = function(){
			$scope.alertClass = 'alert-info';
			$scope.alertMessage = 'Feature under construction';
			$scope.showAlert=true;
		};
        //method called when the report type is changed in the priview pane of report builder
		$scope.selectReportType = function(type){
		    $scope.reportObject.Type = type;
		    $scope.reportObject.GroupBy = undefined;
		    $scope.reportObject.Columns = undefined;
		    $scope.reportObject.Rows = undefined;
			$scope.refresh();
		};
        //function to set the flag which is used to hide the detail rows 
		$scope.showDetails = function(){
			if(!$scope.showDetail)
				$scope.showDetail = true;
			else
				$scope.showDetail = false;
		};
        //get called when the save button is clicked on the report builder view
		$scope.save = function(){
			if($scope.originalReportObject)
				$scope.reportObject = angular.copy( $scope.originalReportObject);
			if(!$scope.reportObject.Id)
				$('#dialogSave').modal('show');
			else
				$scope.saveReport();
		};
        //get callled when the save as button is clicked on the report builder view
		$scope.saveAs = function(){
			$scope.originalReportObject = angular.copy($scope.reportObject);
			delete $scope.reportObject.Id;
			delete $scope.reportObject.Name;
			delete $scope.reportObject.Label;
			delete $scope.reportObject.Description;
			$('#dialogSave').modal('show');
		};
        //close button click reloads the page and loads the report list view
		$scope.close = function(){
			window.location.href = "ReportBuilder";
		};
        //Actually save the report to the server
		$scope.saveReport = function(){
		    if($scope.reportObject.Range)
		        $scope.reportObject.Range = JSON.stringify($scope.reportObject.Range);
		    delete $scope.reportObject.$$hashKey;
			Engine.save($scope.reportObject,function(error){
				if(error.Success)
				{
				    $scope.reportObject = error.Data;
				    if($scope.reportObject.Range)
				        $scope.reportObject.Range = JSON.parse($scope.reportObject.Range);
					$scope.reports.push($scope.reportObject);
					$scope.ErrorMessage = "Report Saved Successfully.";
					$scope.alertClass = 'alert-info';
					setTimeout( function(){$('#dialogSave').modal('hide'); $scope.ErrorMessag=undefined;}, 3000);
				}
				else
				{
					$scope.ErrorMessage = error.ErrorMessage;
					$scope.alertClass = 'alert-danger';
				}
			});
		};
        //Saves report to the server and runs the report
		$scope.saveandrunReport = function(){
		    if($scope.reportObject.Range)
		        $scope.reportObject.Range = JSON.stringify($scope.reportObject.Range);
		    delete $scope.reportObject.$$hashKey;
			Engine.save($scope.reportObject,function(error){
				if(error.Success)
				{
				    $scope.reportObject = error.Data;
				    if($scope.reportObject.Range)
				        $scope.reportObject.Range = JSON.parse($scope.reportObject.Range);
					$scope.reports.push($scope.reportObject);
					$scope.ErrorMessage = "Report Saved Successfully.";
					$scope.alertClass = 'alert-info';
					setTimeout( function(){$('#dialogSave').modal('hide'); $scope.ErrorMessag=undefined;}, 3000);
					$scope.refresh();
				}
				else
				{
					$scope.ErrorMessage = error.ErrorMessage;
					$scope.alertClass = 'alert-danger';
				}
			});
		};
	    //Run the report. Actually need to check if report is saved then the url must be set to report page with the reportId as parameter but
		//while working on unsaved report it should run the report on the same page as it is doing right now
		$scope.runReport = function(){
			$scope.refresh();
		};
        //Open ups the dialog which is used to change the report properties like name, folder etc.
		$scope.reportProperties = function(){
			$('#dialogReportProperties').modal('show');
		};
        //Save report properties as changed by the user
		$scope.saveReportProperties = function(){
			delete $scope.reportObject.$$hashKey;
			Engine.save($scope.reportObject,function(error){
				if(error.Success)
				{
					$scope.reportObject = error.Data;
					$scope.reports.push($scope.reportObject);
					$scope.ErrorMessage = "Report Saved Successfully.";
					$scope.alertClass = 'alert-info';
					setTimeout( function(){$('#dialogReportProperties').modal('hide'); $scope.ErrorMessag=undefined;}, 3000);
					$scope.refresh();
				}
				else
				{
					$scope.ErrorMessage = error.ErrorMessage;
					$scope.alertClass = 'alert-danger';
				}
			});
		};
        //get called when user dicides not to change any report properties at all
		$scope.cancelReportProperties = function(){
			$('#dialogReportProperties').modal('hide');
		};
        //Deletes the report 
		$scope.deleteReport = function(r){
			Engine.delete(r,function(error){
				
				var deletedReport = findValueFromArray($scope.reports,"Id", error.Id);
				$scope.reports.splice($scope.reports.indexOf( deletedReport),1);
				$scope.$apply();
			});
		};
        //Cancel the save report action 
		$scope.cancelSave = function(){
			if($scope.originalReportObject)
				$scope.reportObject = angular.copy( $scope.originalReportObject);
			$('#dialogSave').modal('hide');
		};
        //Used to display the icon on the field based on the field type
		$scope.getFieldClass = function(field){
		    if(field){
		        if($scope.objectfieldsByNameMapOriginal[field.toUpperCase()].SystemType.search(/int/i) != -1)
		            return 'glyphicon-number';
		        else if($scope.objectfieldsByNameMapOriginal[field.toUpperCase()].SystemType.search(/DateTime/i) != -1)
		            return 'glyphicon-calendar';
		        else
		            return 'glyphicon-text';
		    }
		};
        //Filters the fields when filter buttons are clicked on top of the field list
		$scope.filterFields = function(type){
			$scope.objectfieldsArray = [];
			switch(type){
				case 'Numeric':
					angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){
						if(currentObj.SystemType.search(/int/i) != -1)
							$scope.objectfieldsArray.push(currentObj.Name);
					});
					break;
				case 'Date':
					angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){
						if(currentObj.SystemType.search(/DateTime/i) != -1)
							$scope.objectfieldsArray.push(currentObj.Name);
					});
					break;
				case 'Text':
					angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){
						if(currentObj.SystemType.search(/int/i) == -1 && currentObj.SystemType.search(/DateTime/i) == -1)
							$scope.objectfieldsArray.push(currentObj.Name);
					});
					break;
				default:
					angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){$scope.objectfieldsArray.push(currentObj.Name);});
			}
			$scope.objectfieldsArray.sort();
		};
        //remove all the columns and grouping done on the report 
		$scope.removeAllColumns = function(){
		    $scope.reportObject.DisplayFields = '';
		    $scope.reportObject.GroupBy = undefined;
		    $scope.reportObject.Columns = undefined;
		    $scope.reportObject.Rows = undefined;
			$scope.objectfieldsArray = $scope.objectfieldsArray.concat($scope.displayfieldsArray);
			$scope.displayfieldsArray = [];
			$scope.objectfieldsArray.sort();
			$scope.refresh();
		};
	    //Drag drop functionality
        //method get called when the field is successfully droped on th droping zone and splices the field from the origunal array containing the field
		$scope.dropSuccessHandler = function($event,index,array){
		    //$scope.removedfield = array[index];
		    array.splice(($scope.removedfield) ? array.indexOf($scope.removedfield): index,1);
			$scope.objectfieldsArray.sort();
		};
        //get called on droping the field on the drop zone and pushes the field into the array of respective zone 
		$scope.onDrop = function($event,$data,array){
		    $scope.removedfield = $data;
			array.push($data);
		};
		// Group drag and drop handler
		$scope.ongroupDrop = function($event,$data,array){
			array.push($data);
			$scope.isGroupDropped = true;
		};
		$scope.dropgroupSuccessHandler = function($event,index,array){
			alert('inside dropgroupSuccessHandler');
			var field = array[index];
			array.splice(index,1);
			$scope.objectfieldsArray.sort();
		};
        //used to intialize the groupfield object for group report
		$scope.createGroup = function(field){
		    $scope.thisGroupFieldBelongTo = 'GROUPBY';
		    $scope.groupFieldObject = {Field: field, FieldLabel: field};
		    $scope.saveGroupField();
			//$('#dialogGroupField').modal('show');
		};
        //Used to save the grouping objects in there respective grouping array for matrix and group reports
		$scope.saveGroupField = function(){
		    $scope.isGroupDropped = false;
		    if($scope.objectfieldsByNameMapOriginal[$scope.groupFieldObject.Field.toUpperCase()].SystemType.search(/DateTime/i) != -1 && !$scope.mapDatePartByField[$scope.groupFieldObject.Field])
		        $scope.mapDatePartByField[$scope.groupFieldObject.Field] = 'DAY';
			switch($scope.thisGroupFieldBelongTo)
			{
			    case 'COLUMN':
			        if(!$scope.reportObject.Columns)
			            $scope.reportObject.Columns = [];
			        else if(typeof $scope.reportObject.Columns == 'string')
			            $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);

			        $scope.reportObject.Columns.push($scope.groupFieldObject); 
			        $scope.reportObject.Columns = JSON.stringify($scope.reportObject.Columns);
			        break;
			    case 'ROW':
			        if(!$scope.reportObject.Rows)
			            $scope.reportObject.Rows = [];
			        else if(typeof $scope.reportObject.Rows == 'string')
			            $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);
			        
			        $scope.reportObject.Rows.push($scope.groupFieldObject); 
			        $scope.reportObject.Rows = JSON.stringify($scope.reportObject.Rows);
			        break;
			    case 'GROUPBY':
			        if(!$scope.reportObject.GroupBy)
			            $scope.reportObject.GroupBy = [];
			        else if(typeof $scope.reportObject.GroupBy == 'string')
			            $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);

			        $scope.reportObject.GroupBy.push($scope.groupFieldObject); 
			        $scope.reportObject.GroupBy = JSON.stringify($scope.reportObject.GroupBy);
			        break;
			    default:{
			    }
			}
		
			$scope.refresh();
			$('#dialogGroupField').modal('hide');
		};
        //Cancel the creation of group field
		$scope.cancelGroupField = function(){
			$scope.objectfieldsArray = $scope.objectfieldsArray.concat($scope.groupfieldsArray);
			$scope.objectfieldsArray.sort();
			$scope.isGroupDropped = false;
			$('#dialogGroupField').modal('hide');
		};
        //Get called when user want to create or edit the summary formula for the report
		$scope.createeditSummaryFormula = function(sf){
			$scope.summaryFormulaObject = sf;
			$('#dialogSummaryFormula').modal('show');
		};
        //add the summary formula to the grouping field on which the summary formula is built
		$scope.saveSummaryFormula = function(){
			if(!$scope.groupFieldObject.SummaryFormulas)
				$scope.groupFieldObject.SummaryFormulas = [];
			$scope.groupFieldObject.SummaryFormulas.push($scope.summaryFormulaObject);
			$scope.summaryFormulaObject = {};
			$('#dialogSummaryFormula').modal('hide');
		};
        //Cancels the creation of summary formula
		$scope.cancelSummaryFormula = function(){
			$scope.summaryFormulaObject = {};
			$('#dialogSummaryFormula').modal('hide');
		};
        //deletes the summary formula
		$scope.deleteSummaryFormula = function(sf,index){
			$scope.groupFieldObject.SummaryFormulas.splice(index,1);
		};
        //Initialize the groupfield object for column grouping
		$scope.createColumnGroup = function(field){
		    $scope.thisGroupFieldBelongTo = 'COLUMN';
		    $scope.groupFieldObject = {Field: field, FieldLabel: field};
		    $scope.saveGroupField();
		    //$('#dialogGroupField').modal('show');
		};
        //Initialize the objects for row grouping
		$scope.createRowGroup = function(field){
		    $scope.thisGroupFieldBelongTo = 'ROW';
		    $scope.groupFieldObject = {Field: field, FieldLabel: field};
		    $scope.saveGroupField();
		    //$('#dialogGroupField').modal('show');
		};
        //Called when the grouping field from on group is dropped into another or been removed from the group and dropped to original field array
		$scope.removeGroupField = function(reportField,newObj,oldObj){
		    //$scope.objectfieldsArray.push($scope.removedfield);
		    switch(reportField)
		    {
		        case 'GROUPBY':
		            if(typeof $scope.reportObject.GroupBy == 'string')
		                $scope.reportObject.GroupBy = JSON.parse($scope.reportObject.GroupBy);
		            $scope.reportObject.GroupBy.splice($scope.reportObject.GroupBy.indexOf(findValueFromArray($scope.reportObject.GroupBy,'Field',$scope.removedfield)),1);
		            $scope.reportObject.GroupBy = ($scope.reportObject.GroupBy.length > 0) ? JSON.stringify($scope.reportObject.GroupBy) : undefined;
		            break;
		        case 'ROW':
		            if(typeof $scope.reportObject.Rows == 'string')
		                $scope.reportObject.Rows = JSON.parse($scope.reportObject.Rows);
		            $scope.reportObject.Rows.splice($scope.reportObject.Rows.indexOf(findValueFromArray($scope.reportObject.Rows,'Field',$scope.removedfield)),1);
		            $scope.reportObject.Rows = ($scope.reportObject.Rows.length > 0) ? JSON.stringify($scope.reportObject.Rows) : undefined;
		            break;
		        case 'COLUMN':
		            if(typeof $scope.reportObject.Columns == 'string')
		                $scope.reportObject.Columns = JSON.parse($scope.reportObject.Columns);
		            $scope.reportObject.Columns.splice($scope.reportObject.Columns.indexOf(findValueFromArray($scope.reportObject.Columns,'Field',$scope.removedfield)),1);
		            $scope.reportObject.Columns = ($scope.reportObject.Columns.length > 0) ? JSON.stringify($scope.reportObject.Columns) : undefined;
		            break;
		        default:
		            break;
		    }
		    $scope.objectfieldsArray.sort();
		    $scope.refresh();
		};
        //watcher functiona to keep wathc on the tree not selection
		$scope.$watch( 'folderTree.currentNode', function( newObj, oldObj ) {
		    if( $scope.folderTree && angular.isObject($scope.folderTree.currentNode) ) {
				
		    }
		}, false);
	    //New method wathcollection by angular js to keep watch on shallow copy of an object. 
	    //Usefull when we want to watch collections like array
	    //Also usefull in conditions when new properties is been added to object
	    //not to be used when need to keep track on value of perticular proper of an object
        //this watcher keeps watch on display field array to take action on any change
		$scope.$watchCollection('displayfieldsArray',function(newObj, oldObj){
            if(newObj.length != oldObj.length)
		        $scope.refresh();
		});
        //This watcher keeps watch on groupfield array used to group report by field when the report type is Group
		$scope.$watchCollection('groupfieldsArray',function(newObj, oldObj){
		    if(newObj.length != 1 && !$scope.initializedEditReport && newObj.length > oldObj.length)
		            $scope.createGroup(newObj[newObj.length - 1]);
		    else if($scope.initializedEditReport)
		        $scope.initializedEditReport = !$scope.initializedEditReport;
		    else if(newObj.length < oldObj.length)
		        $scope.removeGroupField('GROUPBY',newObj, oldObj);
		});
        //Used to watch the column grouping array of matrix report
		$scope.$watchCollection('colfieldsArray',function(newObj, oldObj){
		    if(newObj.length != 1 && !$scope.initializedEditReport && newObj.length > oldObj.length)
		        $scope.createColumnGroup(newObj[newObj.length - 1]);
		    else if($scope.initializedEditReport)
		        $scope.initializedEditReport = !$scope.initializedEditReport;
		    else if(newObj.length < oldObj.length)
		        $scope.removeGroupField('COLUMN',newObj,oldObj);
		});
        //Used to add watch on rowgrouping array of matrix report
		$scope.$watchCollection('rowfieldsArray',function(newObj, oldObj){
		    if(newObj.length != 1 && !$scope.initializedEditReport && newObj.length > oldObj.length)
		        $scope.createRowGroup(newObj[newObj.length - 1]);
		    else if($scope.initializedEditReport)
		        $scope.initializedEditReport = !$scope.initializedEditReport;
		    else if(newObj.length < oldObj.length)
		        $scope.removeGroupField('ROW',newObj,oldObj);
		});
		//
	    //Filtering logics
        //Method to initialize filer logic objects
		$scope.createFilterLogic = function(){
		    $scope.filterLogic = ($scope.filterLogic) ? $scope.filterLogic : '';
		    if($scope.criteriasArray.length > 0)
		    {
		        if($scope.criteriasArray.length == 1)
		            $scope.filterLogic = '1';
		        else{
		            angular.forEach($scope.criteriasArray,function(crrentCriteria,iIndex){
		                if($scope.filterLogic.indexOf(iIndex + 1) == -1)
		                    $scope.filterLogic += (iIndex != $scope.criteriasArray.length - 1) ? (iIndex + 1 ) + ' AND ' : (iIndex + 1 );
		            });
		        }
		        $scope.isFiltered = true;
		    }
		    $scope.filterNew = undefined;
		};
        //saves the filter logic to report object
		$scope.saveFilterLogic = function(){
		    var filterLogicConditions = $scope.filterLogic.toUpperCase().split('AND').join().split('OR').join().split(',');
		    var missingFilters = [];
		    for(var iIndex = 1; iIndex <= $scope.criteriasArray.length; iIndex ++){
		        var indexFound = false;
		        angular.forEach(filterLogicConditions,function(cfl){
		            var criteria = parseInt(cfl);
		            if(iIndex == criteria)
		                indexFound = true;
		        });
		        if(!indexFound)
		            missingFilters.push(iIndex);
		    }
		    if(missingFilters.length == 0)
		        $scope.IsFilterLogic = false;
		    else
		    {
		        $scope.filterLogicErrorMessage = 'Filter conditions ';
		        angular.forEach(missingFilters,function(current, iIndex){
		            $scope.filterLogicErrorMessage += current + ((missingFilters.length > 1 && iIndex != missingFilters.length) ? ' and ' : ' ')
		        });
		        $scope.filterLogicErrorMessage += 'are defined but not referenced in your filter logic.';
		    }
		    $scope.refresh();
		};
        //get called when cancel filter logic button is called
		$scope.cancelFilterLogic = function(){
		    if($scope.isEdited)
		    {
		        $scope.createFilterLogic();
		        $scope.IsFilterLogic = false;		   
		    }
            else
		        $scope.filterLogic = undefined;
		};
        //to edit the existing filter logic
		$scope.editFilterLogic = function(){
		    $scope.isEdited = true;
		    $scope.IsFilterLogic = true;
		    $scope.createFilterLogic();
		};
        //to remove the filter logic
		$scope.deleteFilterLogic = function(){
		    $scope.filterLogic = undefined;
		    $scope.IsFilterLogic = true;
		};
        //Create field filter
		$scope.createFieldFilter = function(){
		    $scope.filterNew = {Field: $scope.objectfieldsByNameMapOriginal[Object.keys($scope.objectfieldsByNameMapOriginal)[0]].Name, Operator:$scope.conditionalOperators[0]};
            
		    $scope.isFiltered = true;
		};
        //save filter to report
		$scope.saveFilter = function(){
		    if(!$scope.criteriasArray)
		        $scope.criteriasArray = [];
		    if($scope.filterNew.Index != 0 && !$scope.filterNew.Index)
		        $scope.criteriasArray.push($scope.filterNew);
		    else 
		        $scope.criteriasArray[$scope.filterNew.Index] = angular.copy($scope.filterNew);
		    $scope.filterNew = undefined;
		    if(!$scope.IsFilterLogic)
		        $scope.createFilterLogic();
		    $scope.refresh();
		};
        //edit the filter of filters
		$scope.editFilter = function(currentFilter,iIndex){
		    $scope.filterNew = angular.copy($scope.criteriasArray[iIndex]);
		    $scope.filterNew.Index = iIndex;
		};
        //delete the filter of filters
		$scope.deleteFilter = function(currentFilter,iIndex){
		    $scope.criteriasArray.splice(iIndex,1);
		    $scope.refresh();
		};
        //cancel the filter
		$scope.cancelFilter = function(){
		    $scope.filterNew = undefined;
		    if(!$scope.reportObject.SortBy)
		        $scope.isFiltered = false;
		};
        //crete the sort oreder on the report
		$scope.createSortOrder = function(){
		    $scope.sortOrderObject = { SortBy: $scope.displayfieldsArray[0], SortOrder: 'ASC'};
		    $scope.isFiltered = true;
		    $scope.isSorted = false;
		};
        //save the sort order on the report
		$scope.saveSortOrder = function(){
		    $scope.reportObject.SortBy = $scope.sortOrderObject.SortBy + ' ' + $scope.sortOrderObject.SortOrder;
		    $scope.isSorted = true;
		    $scope.refresh();
		};
        //edit the sort oreder
		$scope.editSortOrder = function(){
		    $scope.isSorted = false;
		};
        //delete the sort order
		$scope.deleteSortOrder = function(){
		    $scope.sortOrderObject = undefined;
		    $scope.isSorted = false;   
		    $scope.refresh();
		};
        //cancel the creation of sort oreder or edition
		$scope.cancelSortOrder = function(){
		    if(!$scope.reportObject.SortBy)
		    {
		        $scope.isSorted = false;   
		        $scope.sortOrderObject = undefined;
		    }
		    else
		        $scope.isSorted = true;
		        
		};
        //when the range filter is changed
		$scope.rangeChange = function(){
		    if($scope.timeframeRangeField && $scope.timeframeRangeField.Value != 'alltime' ){
		        $scope.timeframeRangeField.From.Label = moment(eval($scope.timeframeRangeField.From.Label)).format('L');
		        $scope.timeframeRangeField.To.Label = moment(eval($scope.timeframeRangeField.To.Label)).format('L');
		        
		    }else{
		        if(!$scope.timeframeRangeField)
		            $scope.timeframeRangeField = {From : {Value : null}, To: {Value : null} };
		    }
		    $scope.refresh();
		};
	    //Filtering logic ends here
	    //Logic to create folders
		$scope.createReportFolder = function(){
		    $scope.folder = {ObjType:'Folder'};
		    $('#dialogFolder').modal('show');
		};
        //saves the folder on the server
		$scope.saveFolder = function(){
		    Engine.save($scope.folder,function(error){
		        if(error.Success)
		        {
		            $scope.folder = error.Data;
		            $scope.originalFolders.push($scope.reportObject);
		            $scope.ErrorMessage = "Folder Saved Successfully.";
		            $scope.alertClass = 'alert-info';
		            setTimeout( function(){$('#dialogFolder').modal('hide'); $scope.ErrorMessag=undefined;}, 3000);
		            $scope.createFolderHierarchy();
		        }
		        else
		        {
		            $scope.ErrorMessage = error.ErrorMessage;
		            $scope.alertClass = 'alert-danger';
		        }
		    });
		};
        //cancel creation of folder
		$scope.cancelFolder = function(){
		    $scope.folder = undefined;
		    $('#dialogFolder').modal('hide');
		};
	    //Logic to create folders ends here
        //get fired when perticular report id is sent in the url to be edit perticularly in the case when the user clicks on the customize report button on the Report page
		if($scope.editReportId)
		{
			$scope.reportObject = findValueFromArray($scope.reports,"Id",$scope.editReportId);
			$scope.headingText = ($scope.reportObject.Label) ? $scope.reportObject.Label : "Unsaved Report";
			$scope.objectfieldsByNameMapOriginal = Engine.getFieldDefs($scope.reportObject.ObjectName.Name);
			$scope.objectfieldsByNameMap = angular.copy($scope.objectfieldsByNameMapOriginal);
			angular.forEach($scope.reportObject.DisplayFields.split(','), function(currentField){
				delete $scope.objectfieldsByNameMap[currentField];
				$scope.displayfieldsArray.push(currentField)
			}); 
			angular.forEach( $scope.objectfieldsByNameMap, function(currentObj){$scope.objectfieldsArray.push(currentObj.Name)});
			$scope.changeView = true;
			$scope.refresh();
		}
	    //Logic for Pagination
		$scope.addPage = function (iCount) {
		    $scope.checkPaginationEndPoint($scope.currentPage + iCount);
		};
		$scope.checkPaginationEndPoint = function (page) {
		    if (page <= 0) {
		        $scope.currentPage = 1;
		        return;
		    }
		    if (page >= $scope.pageCount + 1) {
		        $scope.currentPage = $scope.pageCount;
		        return;
		    }
		   
		    $scope.currentPage = page;
		    $scope.refresh();
		};
		$scope.setPage = function (iPage, iTotalCount) {
		    $scope.pageCount = Math.ceil(iTotalCount / $scope.pageSize);

		    if ($scope.pageCount == 0)
		    { $scope.currentPage = 1; return; }
		    if (iPage > $scope.pageCount)
		        iPage = $scope.pageCount;
		    else if (iPage <= 0)
		        iPage = 1;
		    if ($scope.pageCount == 0)
		        $scope.pageCount = 1;
		    if (iPage > 0 && iPage <= $scope.pageCount) 
		        $scope.currentPage = iPage;
		};
        //Logic for Pagination ends here
	}]);
	var getMapByField = function(objectArray, objectField){
		var result = {};
		if(objectArray && objectField)
		{
			var fieldArray = objectField.split('.');
			$.each(objectArray, function(iIndex, currentObject){
				var innerObject = currentObject;
				$.each(fieldArray, function(fIndex, currentField){
					if(innerObject)
						innerObject = innerObject[currentField];
				});
				if(!result[innerObject])
					result[innerObject] = [];
				result[innerObject].push(currentObject);
			});
		}
		return result;
	}
	findValueFromArray = function(objectArray, objectField, objectFieldValue)
	{
		var result;
		if(objectArray && objectField && objectFieldValue)
		{   
			var fieldArray = objectField.split('.');
			$.each(objectArray, function(iIndex, currentObject){
				var innerObejct = currentObject;
				$.each(fieldArray, function(fIndex, currentField){
					if(innerObejct)
						innerObejct = innerObejct[currentField];
				});
				if(innerObejct == objectFieldValue)
					result = currentObject;
			});
		}
		return result;
	}
</script>
<script type="text/ng-template" id="add_order.html">
	
</script>
<div class="container-fluid" ng-app="ReportBuilderModule" ng-controller="ReportBuilderController">
    
	<h1 class="page-header" ng-bind="headingText"></h1>
	<div ng-if="showAlert" class="alert {{alertClass}} alert-dismissible" role="alert">
		<button type="button" class="close" data-dismiss="alert">
			<span aria-hidden="true">&times;</span>
			<span class="sr-only">
				Close
			</span>
		</button>
		{{alertMessage}}
	</div>
	<div ng-hide="changeView">
		<div class="row">
			<div class="col-xs-4">
				<button class="btn btn-default " ng-click="createeditReport()"><span class="glyphicon glyphicon-list-alt"></span> New Report...</button>
				<button class="btn btn-default " ng-click="newDashBoard()"><span class="glyphicon glyphicon-signal"></span> New Dashboard...</button>
			</div>
		</div>
		<div class="row">
			<div class="col-xs-3">
				<legend>Folders</legend>
                <div class="row">
                    <div class="col-xs-9" style="padding-right:0;">
                        <input type="search" class="form-control" ng-model="q" placeholder="Find a Folder..." />
                    </div>
                    <div class="col-xs-1" style="padding-left:0;">
                        <!-- Split button -->
                        <div class="btn-group">
                            <button type="button" class="btn btn-default  dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                <span class="glyphicon glyphicon-folder-close"></span>
                                <span class="caret"></span>
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#" ng-click="createReportFolder()">New Report Folder</a></li>
                                <li><a href="#" ng-click="createDashboardFolder()">New Dashboard Folder</a></li>
                            </ul>
                        </div>
                        <!-- Split button -->
                    </div>
                </div>
                <div data-angular-treeview="true"
                     data-tree-id="folderTree"
                     data-search-query="q"
                     data-tree-model="folders"
                     data-node-id="Id"
                     data-node-label="Name"></div>
			</div>
			<div class="col-xs-8">
				<legend >{{(folderTree.currentNode.Name) ? folderTree.currentNode.Name : folders[0].Name}}</legend>
				<div class="row">
					<div class="col-xs-5">
						<input type="search" class="form-control" ng-model="searchQuery" placeholder="Find reports and dashboards..." />
					</div>
				</div>
				<div class="row">
					<div class="col-xs-1">
						<span><strong>Action</strong></span>
					</div>
					<div class="col-xs-6">
						<span><strong>Name</strong></span>
					</div>
					<div class="col-xs-2">
						<span><strong>Folder</strong></span>
					</div>
					<div class="col-xs-2">
						<span><strong>CreatedBy</strong></span>
					</div>
				</div>
				<div class="row" ng-repeat="r in reports | filter: folderTree.currentNode.Id | filter: {Name: searchQuery}">
					<div class="col-xs-1">
						<!-- Split button -->
						<div class="btn-group">
							<button type="button" class="btn btn-default  dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
								<span class="caret"></span>
								<span class="sr-only">Toggle Dropdown</span>
							</button>
							<ul class="dropdown-menu" role="menu">
								<li><a href="#" ng-click="createeditReport(r)">Edit</a></li>
								<li><a href="#" ng-click="deleteReport(r)">Delete</a></li>
								<li><a href="#" ng-click="export(r)">Export</a></li>
							</ul>
						</div>
						<!-- Split button -->
					</div>
					<div class="col-xs-6">
						<a href="~/Report?Id={{r.Id}}"><span><strong>{{r.Label}}</strong></span></a>
						<div class="text-muted">{{r.Description}}</div>
					</div>
					<div class="col-xs-2">
						<span>{{r.Folder.Name}}</span>
					</div>
					<div class="col-xs-2">
						<a href="~/r/{{r.CreatedBy.Id}}"><span>{{r.CreatedBy.Name}}</span></a>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div id="reportDesigner" ng-show="changeView">
		<div class="row">
			<div class="col-xs-10">
				<button class="btn btn-default " ng-click="save()"><span class="glyphicon glyphicon-floppy-disk"></span> Save</button>
				<button class="btn btn-default " ng-click="saveAs()"><span class="glyphicon glyphicon-floppy-save"></span> Save As</button>
				<button class="btn btn-default " ng-click="close()"><span class="glyphicon glyphicon-remove"></span> Close</button>
				<button class="btn btn-default " ng-disabled="!reportObject.Id" ng-click="reportProperties()"><span class="glyphicon glyphicon-cog"></span> Report Properties</button>
				<button class="btn btn-default " ng-click="runReport()"><span class="glyphicon glyphicon-play-circle"></span> Run Report</button>
			</div>
		</div>
		<legend></legend>
		<div class="row">
			<div class="col-xs-3">
				<div class="row">
					<div class="col-xs-3">
						<label>Fields</label>
					</div>
					<div class="col-xs-7">
						<div class="btn-group" role="group" aria-label="...">
							<button id="buttonAll" type="button" class="btn btn-default" title="Show All Fields" ng-click="filterFields()">All</button>
							<button id="buttonTextOnly" type="button" class="btn btn-default" title="Show Text Fields" ng-click="filterFields('Text')">a</button>
							<button id="buttonNumberOnly" type="button" class="btn btn-default" title="Show Number Fields" ng-click="filterFields('Numeric')">#</button>
							<button id="buttonDateOnly" type="button" class="btn btn-default" title="Show Date Fields" ng-click="filterFields('Date')"><span class="glyphicon glyphicon-calendar"></span></button>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-xs-10">
						<input type="search" class="form-control" ng-model="searchFields" placeholder="Quick Find" />
					</div>
				</div>
				<div class="row">
					<div class="col-xs-10">
						<span>Drag and drop to add fields to report.</span>
					</div>
				</div>
				<div valign="top">
					<ul ui-on-Drop="onDrop($event,$data,objectfieldsArray)">
						<li ui-draggable="true" drag="field" 
							on-drop-success="dropSuccessHandler($event,$index,objectfieldsArray)"
							ng-repeat="field in objectfieldsArray | filter : searchFields track by $index">
                            <span class="glyphicon" ng-class="getFieldClass(field)"></span><!-- glyphicon-pushpin ng-class="{'glyphicon-calendar': objectfieldsByNameMapOriginal[field.toUpperCase()].DisplayAs == 'DateTime', 'glyphicon-font': objectfieldsByNameMapOriginal[field.toUpperCase()].DisplayAs == 'DateTime'}"-->
							{{field}}
						</li>
					</ul>
				</div>
			</div>
			<div class="col-xs-9">
				<form class="">
					<div class="row">
						<div class="col-xs-2">
							<label for="filterAddButton">Filters</label>
							<!-- Split button pure-form pure-form-stacked-->
							<div class="btn-group" id="filterAddButton">
                                <button type="button" class="btn btn-default " ng-click="createFieldFilter()">Add</button>
							  <button type="button" class="btn btn-default  dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
								<span class="caret"></span>
								<span class="sr-only">Toggle Dropdown</span>
							  </button>
							  <ul class="dropdown-menu" role="menu">
								<li><a href="#" ng-click="createFieldFilter()"><span class="glyphicon glyphicon-filter"></span> Field Filter<div class="text-muted">e.g.,Account Name <strong>equals</strong> Enzigma</div></a></li>
                                <li ng-disabled="$scope.criteriasArray.length <= 0" ><a href="#" ng-disabled="$scope.criteriasArray.length <= 0" ng-class="($scope.criteriasArray.length <= 0) ? 'disabled' : 'active'" ng-click="createFilterLogic()"><span class="glyphicon glyphicon-screenshot"></span> Filter Logic<div class="text-muted">e.g.,Filter1 <strong>AND</strong> (Filter2 <strong>OR</strong> Filter3)</div></a></li>
								@*<li><a href="#" ><span class="glyphicon glyphicon-random"></span> Cross Filter<div class="text-muted">e.g.,Account <strong>with</strong> or <strong>without</strong> Address</div></a></li>*@
								<li ng-show="reportObject.Type == 'Simple'"><a href="#" ng-click="createSortOrder()"><span class="glyphicon glyphicon-sort-by-alphabet"></span> Sort By<div class="text-muted">e.g., Accounts by <strong>Annual Revenue</strong></div></a></li>
								<li><a href="#" ><span class="glyphicon glyphicon-question-sign"></span> Help me choose</a></li>
							  </ul>
							</div>
							<!-- Split button -->
						</div>
					</div>
					<div class="row">
						<div class="col-xs-2">
							<label for="listViews">Show</label>
                            <select id="listViews" class="form-control">
                                <option value="" selected="selected">--None--</option>
                            </select>
						</div>
					</div>
					<div class="row">
						<div class="col-xs-3">
							<label for="dateFields">Date Field</label>
							<select id="datefields" class="form-control" ng-model="timeframeDateField"  ><!--ng-options="field as field.Name for field in objectDateFieldsArray"-->
								<option ng-repeat="field in objectDateFieldsArray track by $index" ng-selected="$index == 0">{{field.Name}}</option>
							</select>
						</div>
						<div class="col-xs-3">
							<label for="rangefields">Range</label>
							<select id="rangefields" class="form-control" ng-model="timeframeRangeField" ng-options="r as r.Label group by r.Parent for r in dateRanges" ng-change="rangeChange()">
								<option value="" selected="selected">Custom</option>
							</select>
						</div>
						<div class="col-xs-3">
							<label for="fromDateField">From</label>
                            <div class='input-group date' id='datetimepickerFrom'>
                                <input id="fromDateField" class="form-control" type="text" ng-model="timeframeRangeField.From.Label" data-date-format="yyyy-MM-dd">
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </div>
						<div class="col-xs-3">
							<label for="toDateField">To</label>
                            <div class='input-group date' id='datetimepickerTo'>
                                <input id="toDateField" class="form-control" type="text" ng-model="timeframeRangeField.To.Label" data-date-format="yyyy-MM-dd">
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </div>
					</div>
					<div class="row">
						<div class="col-xs-12">
							<div id="filterlogicPanel" class="filterlogicPanel">
                                <div id="nofilterlogicText" class="noFilterText" ng-hide="isFiltered || criteriasArray.length > 0">
                                    To add filters, click <b>Add</b>.
                                </div>
                                <div ng-show="isFiltered && filterLogic && IsFilterLogic">
                                    <div class="row">
                                        <div class="col-xs-2">
                                            <span>Filter Logic</span>
                                        </div>
                                        <div class="col-xs-6">
                                            <input class="form-control" ng-class="{'ng-invalid-required': filterLogicErrorMessage}" ng-model="filterLogic" style="text-transform:uppercase;" />
                                            <span class="field-error" ng-show="filterLogicErrorMessage">{{filterLogicErrorMessage}}</span>
                                        </div>
                                        <div class="col-xs-2">
                                            <button type="button" class="btn btn-primary" ng-click="saveFilterLogic()">OK</button>
                                            <button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelFilterLogic()">Cancel</button>
                                        </div>
                                    </div>
                                </div>
                                <div ng-hide="IsFilterLogic">
                                    <div class="row">
                                        <div class="col-xs-6">
                                            <span>Filter Logic <strong>{{filterLogic}}</strong></span>
                                        </div>
                                        <div class="col-xs-2">
                                            <a href="#" ng-click="editFilterLogic()">Edit</a>
                                            <a href="#" ng-click="deleteFilterLogic()">Remove</a>
                                        </div>
                                    </div>
                                </div>
                                <div ng-show="isFiltered &&  filterNew">
                                    <div class="row">
                                        <div class="col-xs-3">
                                            <select class="form-control" ng-model="filterNew.Field" ng-options="value.Name as value.Label for (key,value) in objectfieldsByNameMapOriginal"></select>
                                        </div>
                                        <div class="col-xs-2">
                                            <select class="form-control" ng-model="filterNew.Operator" ng-options="operator as operator.Label for operator in conditionalOperators"></select>
                                        </div>
                                        <div class="col-xs-3">
                                            <input class="form-control" ng-model="filterNew.Value" />
                                        </div>
                                        <div class="col-xs-2">
                                            <button type="button" class="btn btn-primary" ng-click="saveFilter()">OK</button>
                                            <button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelFilter()">Cancel</button>
                                        </div>
                                    </div>
                                </div>
                                <div ng-show="criteriasArray.length > 0 ">
                                    <div class="row" ng-repeat="criteriaFilter in criteriasArray track by $index">
                                        <div class="col-xs-6">
                                            <span>{{$index + 1}}. <strong>{{criteriaFilter.Field}}</strong> {{criteriaFilter.Operator.Label}} {{(criteriaFilter.Value) ? criteriaFilter.Value : "\"\""}}</span>
                                        </div>
                                        <div class="col-xs-2">
                                            <a href="#" ng-click="editFilter(criteriaFilter, $index)">Edit</a>
                                            <a href="#" ng-click="deleteFilter(criteriaFilter, $index)">Remove</a>
                                        </div>
                                    </div>
                                </div>
                                <div ng-show="sortOrderObject && !isSorted">
                                    <div class="row">
                                        @*<div class="col-xs-2">
                                            <label for="rowLimit">Row Limit</label>
                                            <input id="rowLimit" name="rowLimit" class="form-control" ng-model="sortOrderObject.RowLimit" ng-pattern="/^[0-9]*$/" placeholder="1 to 99" />
                                            <span class="field-error" ng-show="!sortOrderObject.RowLimit && numericRegEx.test(sortOrderObject.RowLimit)">This is required field.</span>
                                            <span class="field-error" ng-show="!numericRegEx.test(sortOrderObject.RowLimit)">Only intergers are allowed.</span>
                                        </div>*@
                                        <div class="col-xs-4">
                                            <div class="row">
                                                <div class="col-xs-6">
                                                    <label for="sortBy">Sorted By</label>
                                                    <select id="sortBy" name="sortBy" class="form-control" ng-model="sortOrderObject.SortBy" ng-options="field for field in displayfieldsArray" >
                                                        @*<option ng-selected="$index == 1">--None--</option>*@
                                                        <!-- track by $index -->
                                                    </select>
                                                </div>
                                                <div class="col-xs-6">
                                                    <label for="sortOrder" style="visibility: hidden;">sort Order</label>
                                                    <select id="sortOrder" name="sortOrder" class="form-control" class="form-control" ng-model="sortOrderObject.SortOrder">
                                                        <option value="ASC" selected="selected">Ascending</option>
                                                        <option value="DESC">Descending</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-xs-2" style="padding-top:2.5%;">
                                            <button type="button" class="btn btn-primary" ng-click="saveSortOrder()">OK</button>
                                            <button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelSortOrder()">Cancel</button>
                                        </div>
                                    </div>
                                </div>
                                <div ng-show="isSorted">
                                    <div class="row">
                                        <div class="col-xs-6">
                                            <span>Sorted By <strong>{{sortOrderObject.SortBy}}</strong>, <strong>{{(sortOrderObject.SortOrder == 'ASC') ? 'Ascending' : 'Descending'}}</strong></span>
                                        </div>
                                        <div class="col-xs-2">
                                            <a href="#" ng-click="editSortOrder()">Edit</a>
                                            <a href="#" ng-click="deleteSortOrder()">Remove</a>
                                        </div>
                                    </div>
                                </div>
							</div>
						</div>
					</div>
					<div class="row">
						<legend></legend>
					</div>
					<div class="row">
						<div class="col-xs-2">
							<label>Preview</label>
						</div>
						<div class="col-xs-2">
							<div class="dropdown">
								<a class="dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
									{{(reportObject.Type) ? reportObject.Type: reportTypes[0]}} Format
								<span class="caret"></span>
								</a>
								<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1" >
									<li role="presentation" ng-repeat="t in reportTypes"><a role="menuitem" tabindex="-1" href="#" ng-click="selectReportType(t)">{{t}}</a></li>
								</ul>
							</div>
						</div>
						<div class="col-xs-2">
							<div class="dropdown">
								<a class="dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
									Show
								<span class="caret"></span>
								</a>
								<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1" >
									<li role="presentation" ><a role="menuitem" tabindex="-1" href="#" ng-click="showDetails()"><span ng-class="(showDetail) ? 'glyphicon glyphicon-ok' : ''"></span> Details</a></li>
								</ul>
							</div>
						</div>
						<div class="col-xs-2">
							<a href="#" ng-click="removeAllColumns()">Remove All Columns</a>
						</div>
					</div>
					<div class="row">
						<div class="col-xs-10">
                            <table ng-if="displayfieldsArray.length == 0">
                                <tr ui-on-drop="onDrop($event,$data,displayfieldsArray)">
                                    <td ui-draggable="true" drag="displayField" on-drop-success="dropSuccessHandler($event,$index,displayfieldsArray)">Drop a field here</td>
                                </tr>
                            </table>
                            <div style="text-align: right;">
                                <div class="pager">
                                    <nav class="pagination">
                                        <a class="first" ng-click="checkPaginationEndPoint(1)"><<</a>
                                        <a class="prev" ng-click="addPage(-1)"><</a>
                                        <div class="pagedisplay">{{currentPage}}/{{pageCount}}</div>
                                        <a ng-click="addPage(1)">></a>
                                        <a ng-click="checkPaginationEndPoint(pageCount)">>></a>
                                        <select class="pagesize ng-pristine ng-untouched ng-valid" ng-model="pageSize" ng-change="setPage(1,totalRecords);checkPaginationEndPoint(1);">
                                            <option value="10" selected="selected">10</option>
                                            <option value="20">20</option>
                                            <option value="30">30</option>
                                            <option value="40">40</option>
                                            <option value="50">50</option>
                                        </select>
                                    </nav>
                                </div>
                            </div>
							<div id="reportContent">
								
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div id="dialogObject" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4 class="modal-title">Select Object</h4>
				</div>
				<div class="modal-body">
					<select class="form-control" ng-model="objectName" ng-options="o as o.Name for o in objectsArray">
						<option value="" selected="selected">--None--</option>
					</select>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancel()">Cancel</button>
					<button type="button" class="btn btn-primary" ng-click="newReport()">Save changes</button>
				</div>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
	<div id="dialogSave" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4 class="modal-title">Save Report</h4>
				</div>
				<form name="SaveReportForm">
					<div class="modal-body">
						<div ng-show="ErrorMessage" class="alert {{alertClass}} alert-dismissible" role="alert">
							<button type="button" class="close" data-dismiss="alert">
								<span aria-hidden="true">&times;</span>
								<span class="sr-only">
									Close
								</span>
							</button>
							{{ErrorMessage}}
						</div>
						<div>
							<label for="reportName">Report Name</label>
							<input id="reportName" name="reportName" class="form-control" ng-model="reportObject.Name" required/>
							<span class="field-error" ng-show="!SaveReportForm.reportName.$pristine && SaveReportForm.reportName.$error.required">Name is required field.</span>
						</div>
						<div>
							<label for="reportLabel">Report Label</label>
							<input id="reportLabel" name="reportLabel" class="form-control" ng-model="reportObject.Label" required/>
							<span class="field-error" ng-show="!SaveReportForm.reportLabel.$pristine && SaveReportForm.reportLabel.$error.required">Name is required field.</span>
						</div>
						<div>
							<label for="reportDescription">Report Description</label>
							<textarea id="reportDescription" class="form-control" ng-model="reportObject.Description"></textarea>
						</div>
						<div>
							<label for="reportFolder">Report Folder</label>
                            <select id="reportFolder" class="form-control" ng-model="reportObject.Folder" ng-options="folder as folder.Name for folder in originalFolders">
                                <option value="" selected="selected">--None--</option>
                            </select>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" ng-disabled="SaveReportForm.$invalid" ng-click="saveReport()">Save changes</button>
						<button type="button" class="btn btn-default" ng-disabled="SaveReportForm.$invalid" ng-click="saveandrunReport()">Save and Run Report</button>
						<button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelSave()">Cancel</button>
					</div>
				</form>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
	<div id="dialogReportProperties" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4 class="modal-title">Report Properties</h4>
				</div>
				<form name="SaveReportForm">
					<div class="modal-body">
						<div ng-show="ErrorMessage" class="alert {{alertClass}} alert-dismissible" role="alert">
							<button type="button" class="close" data-dismiss="alert">
								<span aria-hidden="true">&times;</span>
								<span class="sr-only">
									Close
								</span>
							</button>
							{{ErrorMessage}}
						</div>
						<div>
							<label for="reportObjectName">Report Object</label>
							<span id="reportObjectName" name="reportObjectName" class="form-control" ng-bind="reportObject.ObjectName.Name" style="border:none"></span>
						</div>
						<div>
							<label for="reportName">Report Name</label>
							<input id="reportName" name="reportName" class="form-control" ng-model="reportObject.Name" required/>
							<span class="field-error" ng-show="!SaveReportForm.reportName.$pristine && SaveReportForm.reportName.$error.required">Name is required field.</span>
						</div>
						<div>
							<label for="reportLabel">Report Label</label>
							<input id="reportLabel" name="reportLabel" class="form-control" ng-model="reportObject.Label" required/>
							<span class="field-error" ng-show="!SaveReportForm.reportLabel.$pristine && SaveReportForm.reportLabel.$error.required">Name is required field.</span>
						</div>
						<div>
							<label for="reportDescription">Report Description</label>
							<textarea id="reportDescription" class="form-control" ng-model="reportObject.Description"></textarea>
						</div>
						<div>
							<label for="reportFolder">Report Folder</label>
                            <select id="reportFolder" class="form-control" ng-model="reportObject.Folder" ng-options="folder as folder.Name for folder in originalFolders">
                                <option value="" selected="selected">--None--</option>
                            </select>
						</div>
						<div>
							<label for="reportObjectName">Last modified by</label>
							<span id="reportObjectName" name="reportObjectName" class="form-control" style="border:none">{{reportObject.ModifiedBy.Name}} on {{reportObject.ModifiedOn | date : 'M/d/yyyy h:mm a'}}</span>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" ng-disabled="SaveReportForm.$invalid" ng-click="saveReportProperties()">Save changes</button>
						<button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelReportProperties()">Cancel</button>
					</div>
				</form>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
	<div id="dialogGroupField" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4 class="modal-title">Create Group Field</h4>
				</div>
				<form name="GroupFieldForm">
					<div class="modal-body">
						<div ng-show="ErrorMessage" class="alert {{alertClass}} alert-dismissible" role="alert">
							<button type="button" class="close" data-dismiss="alert">
								<span aria-hidden="true">&times;</span>
								<span class="sr-only">
									Close
								</span>
							</button>
							{{ErrorMessage}}
						</div>
						<div>
							<label for="groupField">Field</label>
							<span id="groupField" name="groupField" class="form-control" ng-bind="groupFieldObject.Field" style="border:none"></span>
						</div>
						<div>
							<label for="groupLabel">Group Name</label>
							<input id="groupLabel" name="groupLabel" class="form-control" ng-model="groupFieldObject.FieldLabel" required/>
							<span class="field-error" ng-show="!GroupFieldForm.groupLabel.$pristine && GroupFieldForm.groupLabel.$error.required">Name is required field.</span>
						</div>
						<div ng-show="groupFieldObject.SummaryFormulas">
							<legend>Summary Formulas</legend>
							<div class="row">
								<div class="col-xs-1">
									<strong>Action</strong>
								</div>
								<div class="col-xs-3">
									<strong >Name</strong>
								</div>
								<div class="col-xs-3">
									<strong >Field</strong>
								</div>
								<div class="col-xs-3">
									<strong >Length</strong>
								</div>
							</div>
							<div ng-repeat="sf in groupFieldObject.SummaryFormulas track by $index">
								<div class="row">
									<div class="col-xs-1">
										<!-- Split button -->
										<div class="btn-group">
											<button type="button" class="btn btn-default  dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
												<span class="caret"></span>
												<span class="sr-only">Toggle Dropdown</span>
											</button>
											<ul class="dropdown-menu" role="menu">
												<li><a href="#" ng-click="createeditSummaryFormula(sf)">Edit</a></li>
												<li><a href="#" ng-click="deleteSummaryFormula(sf,$index)">Delete</a></li>
											</ul>
										</div>
										<!-- Split button -->
									</div>
									<div class="col-xs-3">
										<span ng-bind="sf.Name"></span>
									</div>
									<div class="col-xs-3">
										<span ng-bind="sf.Field"></span>
									</div>
									<div class="col-xs-3">
										<span ng-bind="sf.Operation"></span>
									</div>
								</div>
							</div>
						</div>
						<div>
							<div class="row">
								<div class="col-xs-8"></div>
								<div class="col-xs-2">
									<button type="button" class="btn btn-default" ng-click="createeditSummaryFormula()">Add Summary</button>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" ng-disabled="GroupFieldForm.$invalid" ng-click="saveGroupField()">Save changes</button>
						<button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelGroupField()">Cancel</button>
					</div>
				</form>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
	<div id="dialogSummaryFormula" class="modal fade">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4 class="modal-title">Summary Formula</h4>
				</div>
				<form name="SummaryFormulaForm">
					<div class="modal-body">
						<div ng-show="ErrorMessage" class="alert {{alertClass}} alert-dismissible" role="alert">
							<button type="button" class="close" data-dismiss="alert">
								<span aria-hidden="true">&times;</span>
								<span class="sr-only">
									Close
								</span>
							</button>
							{{ErrorMessage}}
						</div>
						<div>
							<label for="summaryformulaName">Formula Name</label>
							<input id="summaryformulaName" name="summaryformulaName" class="form-control" ng-model="summaryFormulaObject.Name" required/>
							<span class="field-error" ng-show="!SummaryFormulaForm.summaryformulaName.$pristine && SummaryFormulaForm.summaryformulaName.$error.required">Name is required field.</span>
						</div>
						<div>
							<label for="summaryformulaField">Formula Field</label>
							<select id="reportFolder" class="form-control" ng-model="summaryFormulaObject.Field" ng-options="field for field in summaryFieldsArray">
								<option value="" selected="selected">--None--</option>
							</select>
							<span class="field-error" ng-show="!SummaryFormulaForm.summaryformulaField.$pristine && SummaryFormulaForm.summaryformulaField.$error.required">Field is required field.</span>
						</div>
						<div>
							<label for="reportFolder">Report Folder</label>
							<select id="reportFolder" class="form-control" ng-model="summaryFormulaObject.Operation" >
								<option value="Count" selected="selected">Count</option>
								<option value="Avg" >Avg</option>
								<option value="Max" >Max</option>
								<option value="Min" >Min</option>
								<option value="Sum" >Sum</option>
							</select>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" ng-disabled="SummaryFormulaForm.$invalid" ng-click="saveSummaryFormula()">Save</button>
						<button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelSummaryFormula()">Cancel</button>
					</div>
				</form>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
    <div id="dialogFolder" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h4 class="modal-title">New Folder</h4>
                </div>
                <div class="modal-body">
                    <div ng-show="ErrorMessage" class="alert {{alertClass}} alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert">
                            <span aria-hidden="true">&times;</span>
                            <span class="sr-only">
                                Close
                            </span>
                        </button>
                        {{ErrorMessage}}
                    </div>
                    <form name="folderForm">
                        <div class="form-group">
                            <label for="folderName">Name</label>
                            <input id="folderName" name="folderName" class="form-control" ng-model="folder.Name" required />
                            <span class="field-error" ng-show="!folderForm.folderName.$pristine && folderForm.folderName.$error.required">Name is required field.</span>
                        </div>
                        <div class="form-group">
                            <label for="folderParent">Parent Folder</label>
                            <select class="form-control" ng-model="folder.ParentFolder" ng-options="o as o.Name for o in originalFolders">
                                <option value="" selected="selected">--Select Parent Folder--</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" ng-click="cancelFolder()">Cancel</button>
                    <button type="button" class="btn btn-primary" ng-disabled="folderForm.$invalid" ng-click="saveFolder()">Save Folder</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
</div>


